/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package de.adesso.dtmg.util.tuple;

import com.google.common.collect.ImmutableList;
import de.adesso.dtmg.functions.MoreCollectors;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.util.stream.IntStream;

/**
 * Created by moehler on 01.06.2016.
 */
public final class HObservableLists {
    private HObservableLists() {
    }

    public static <A> ObservableList<A> addFirst(A a, ObservableList<A> l) {
        Builder<A> builder = newBuilder();
        return builder.add(a).addAll(l).build();
    }

    public static <A> ObservableList<A> addLast(A a, ObservableList<A> l) {
        Builder<A> builder = newBuilder();
        return builder.addAll(l).add(a).build();
    }

    public static <E> ObservableList<E> take(ObservableList<E> l, int count) {
        if(l.isEmpty()) return l;
        Builder<E> builder = newBuilder();
        return builder.addAll(IntStream.range(0, count)
                .mapToObj(i -> l.get(i)).collect(MoreCollectors.toObservableList())).build();
    }

    public static <E> ObservableList<E> drop(ObservableList<E> l, int count) {
        if(l.isEmpty()) return l;
        Builder<E> builder = newBuilder();
        return builder.addAll(IntStream.range(count, l.size())
                .mapToObj(i -> l.get(i)).collect(MoreCollectors.toObservableList())).build();

    }

    public static <E> ObservableList<ObservableList<E>> splitAt(ObservableList<E> l, int index) {
        Builder<ObservableList<E>> builder = newBuilder();
        return builder
                .add(take(l,index))
                .add(drop(l,index))
                .build();
    }

    public static <E> Builder<E> newBuilder() {
        return new Builder<E>();
    }

    public static final class Builder<E> {
        final ObservableList<E> content;
        /**
         * Creates a new builder. The returned builder is equivalent to the builder
         * generated by {@link ImmutableList#builder}.
         */
        public Builder() {
            content = FXCollections.observableArrayList();
        }

        /**
         * Adds {@code element} to the {@code ImmutableList}.
         *
         * @param element the element to add
         * @return this {@code Builder} object
         * @throws NullPointerException if {@code element} is null
         */
        public Builder<E> add(E element) {
            content.add(element);
            return this;
        }

        /**
         * Adds each element of {@code elements} to the {@code ImmutableList}.
         *
         * @param elements the {@code Iterable} to add to the {@code ImmutableList}
         * @return this {@code Builder} object
         * @throws NullPointerException if {@code elements} is null or contains a
         *     null element
         */
        public Builder<E> addAll(ObservableList<? extends E> elements) {
            content.addAll(elements);
            return this;
        }

        /**
         * Adds each element of {@code elements} to the {@code ImmutableList}.
         *
         * @param elements the {@code Iterable} to add to the {@code ImmutableList}
         * @return this {@code Builder} object
         * @throws NullPointerException if {@code elements} is null or contains a
         *     null element
         */
        public Builder<E> add(E... elements) {
            content.addAll(elements);
            return this;
        }

        /**
         * Returns a newly-created {@code ImmutableList} based on the contents of
         * the {@code Builder}.
         */
        public ObservableList<E> build() {
            return FXCollections.unmodifiableObservableList(content);
        }
    }
}